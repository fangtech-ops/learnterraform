version: 3

workflows:

  # We need to override Atlantis default workflow with the custom workflow below.
  #
  # According to https://www.runatlantis.io/docs/custom-workflows.html#usage ,
  # in order for a repo (i.e., this) to define and use its own repo-side (as opposed to server-side) custom workflows,
  # the server-side config needs to have:
  #       allowed_overrides: [workflow]
  #       allow_custom_workflows: true
  #
  # We did that server-side config at
  #       https://github.com/narvar/flux-infra/blob/e5ba5ac89c38f21c82785f8ad4b4f6e974d11f0e/resources/flux-helm-releases/atlantis/helmrelease.yaml#L62-L65

  narvar-workflow:
    plan:
      steps:
        - init

        - env:
            name: SHORT_STACK_NAME

            # https://stackoverflow.com/questions/21115121/how-to-test-if-string-matches-a-regex-in-posix-shell-not-bash
            # This 'command:' is run in Bourne shell. Atlantis doesn't use Bash for this.
            # So, too bad, we can't use Bash regular expression operator "=~" (together with ${BASH_REMATCH[1]}) which would have been ideal.
            #
            # command: 'if [[ "${DIR}" =~ terraform-aws-accounts/.*/(.*)/ ]]; then echo ${BASH_REMATCH[1]}; fi'
            command: |
              case "${DIR}" in
                */dev01/*)  echo dev01   ;;
                */dev02/*)  echo dev02   ;;
                */dev71/*)  echo dev71   ;;

                */qa01/*)   echo qa01    ;;
                */qa02/*)   echo qa02    ;;
                */qa71/*)   echo qa71    ;;

                */st01/*)   echo st01    ;;
                */st02/*)   echo st02    ;;
                */st71/*)   echo st71    ;;

                */prod01/*) echo prod01  ;;
                */prod02/*) echo prod02  ;;
                */prod71/*) echo prod71  ;;

                *)          echo ""      ;;
              esac

        # - run: echo SHORT_STACK_NAME=${SHORT_STACK_NAME} # debug

        - env:
            # The multiple env vars ${SHORT_STACK_NAME}_component_platform_db_password are set by:
            #   https://github.com/narvar/flux-infra/blob/674b720a55b492dfa7e4f9c9b51f1d99e7c02cc2/resources/flux-helm-releases/atlantis/helmrelease.yaml#L104-L114
            name: TF_VAR_component_platform_db_password # Supplies the value for https://github.com/narvar/terraform-aws-accounts/blob/640835fec9f04b4db5eb0265b02d578efdbe6dcc/qa/qa02/60-apps-infra/variables.tf#L59, etc.

            # https://stackoverflow.com/questions/1921279/how-to-get-a-variable-value-if-variable-name-is-stored-as-string
            command: |
              eval X=\$${SHORT_STACK_NAME}_component_platform_db_password
              echo $X

        - plan


    apply:
      steps:
        - env:
            name: SHORT_STACK_NAME
            command: |
              case "${DIR}" in
                */dev01/*)  echo dev01   ;;
                */dev02/*)  echo dev02   ;;
                */dev71/*)  echo dev71   ;;

                */qa01/*)   echo qa01    ;;
                */qa02/*)   echo qa02    ;;
                */qa71/*)   echo qa71    ;;

                */st01/*)   echo st01    ;;
                */st02/*)   echo st02    ;;
                */st71/*)   echo st71    ;;

                */prod01/*) echo prod01  ;;
                */prod02/*) echo prod02  ;;
                */prod71/*) echo prod71  ;;

                *)          echo ""      ;;
              esac

        - env:
            name: TF_VAR_component_platform_db_password
            command: |
              eval X=\$${SHORT_STACK_NAME}_component_platform_db_password
              echo $X

        # We cannot do:
        #   - apply
        #   - apply:
        #       extra_args: ["-refresh-only"]
        # because after the 1st 'apply', Atlantis will automatically delete the $PLANFILE.
        # But for the 2nd 'apply', Atlantis will look for that just-deleted plan file, which will fail.
        # To overcome that problem, we have to use custom "run:" commands (below) rather than augmenting
        # the out-of-the-box step definition.
        # See:
        #     - https://www.runatlantis.io/docs/custom-workflows.html#custom-init-plan-apply-commands
        #
        # After (manually) entering the comment "atlantis apply" into the Github browser console for a PR,
        # the following sequence of custom commands kick in, and should result in these logs:
        #
        #   $ kubectl logs sts/atlantis -n atlantis -f --tail=10
        #       {"level":"info",... "parsed comment as command=\"apply\" ...
        #       {"level":"info",... "successfully ran \"terraform apply $PLANFILE\"     in \"/atlantis-data/repos/narvar/terraform-aws-accounts/10/default/qa/qa71/30-eks1\"",...
        #       {"level":"info",... "successfully ran \"terraform apply -refresh-only\" in \"/atlantis-data/repos/narvar/terraform-aws-accounts/10/default/qa/qa71/30-eks1\"",...
        #       ...
        #
        # To find the correct version of terraform executable, we use the tricks here:
        #     - https://www.runatlantis.io/docs/custom-workflows.html#custom-run-command for env var ATLANTIS_TERRAFORM_VERSION
        #     - https://github.com/runatlantis/atlantis/issues/668

        - # This is the 1st 'apply' which is the same as what Atlantis would do by default.
          run: terraform${ATLANTIS_TERRAFORM_VERSION} apply $PLANFILE -no-color

        - # This is the 2nd 'apply' that we customly add. For why we need it, see:
          #   - https://github.com/narvar/terraform-aws-accounts#322-example-of-command-sequence-for-recreating-an-eks-cluster
          #
          # For reasons I haven't figured out, we need to add '-auto-approve' in this 2nd 'terraform apply' (below)
          # although we didn't need it in the previous (above) 'terraform apply'; otherwise, we'd get this error:
          #
          #       Would you like to update the Terraform state to reflect these detected changes?
          #         Terraform will write these changes to the state without modifying any real infrastructure.
          #         There is no undo. Only 'yes' will be accepted to confirm.
          #
          #         Enter a value:
          #       Error: error asking for approval: EOF
          #
          run: |
            echo "......................................................................................................"
            echo "[Narvar] Now running 'terraform apply' again but with '-refresh-only' in order to pick up any slack..."
            echo
            terraform${ATLANTIS_TERRAFORM_VERSION} apply -refresh-only -auto-approve -no-color


projects:
  # Skip all occurrences of these subdirs:
  #   - 10-bootstrap
  #     Because: No IAM Roles necessarily exist yet (needed by providers.tf:'role_arn') when the AWS Account was just created.
  #
  # For all the skipped folders, we need to run 'terraform apply' manually from our laptop. See README.md in each such folder.


  # ............ devops ...................................
  - dir: ./admin/devops/10-bootstrap
    autoplan:
      enabled: false # !!!!!!

  - dir: ./admin/devops/20-infra
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./admin/devops/30-eks1
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./admin/devops/40-eks1-bootstrap
    autoplan:
      enabled: true
    workflow: narvar-workflow


  # ............ networking ...............................
  - dir: ./admin/networking/10-bootstrap
    autoplan:
      enabled: false # !!!!!!

  - dir: admin/networking/20-infra
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: admin/networking/40-cross-account-irsa-for-eks
    autoplan:
      enabled: true
    workflow: narvar-workflow


  # .......... dev71 ......................................
  - dir: ./dev/dev71/10-bootstrap
    autoplan:
      enabled: false # !!!!!!

  - dir: ./dev/dev71/20-infra
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./dev/dev71/30-eks1
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./dev/dev71/40-eks1-bootstrap
    autoplan:
      enabled: true
    workflow: narvar-workflow


  # .......... qa01 (new) .................................
  - dir: ./qa/qa01/20-infra
    autoplan:
      enabled: true
    workflow: narvar-workflow


  # .......... qa02 (new) .................................
  - dir: ./qa/qa02/30-eks1
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/30-eks2-cequence
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/60-apps-infra
    autoplan:
      enabled: true
    workflow: narvar-workflow

  # List nested app folders in alphabetical order.
  - dir: ./qa/qa02/70-apps/analytics
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/api
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/assist
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/atlas
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/bot-defender
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/care
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/carrier
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/content-elasticsearch
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/datadog-metrics
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/exception
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/freighter
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/notification-time
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/notify-external-webhook
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/order
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/performance-test
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/response-mock
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/quartz
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/returns
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/rules-engine
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/scheduler
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/selenium
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/shopify
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/sleep-service
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/sqs-crypt
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/template-processor
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/toran
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/tracking
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/vault
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa02/70-apps/yugabyte-test-rig
    autoplan:
      enabled: true
    workflow: narvar-workflow


  # .......... qa71 .......................................
  - dir: ./qa/qa71/10-bootstrap
    autoplan:
      enabled: false # !!!!!!

  - dir: ./qa/qa71/20-infra
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa71/30-eks1
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa71/40-eks1-bootstrap
    autoplan:
      enabled: true
    workflow: narvar-workflow

  - dir: ./qa/qa71/70-apps/atlas-data-deletion
    autoplan:
      enabled: true
    workflow: narvar-workflow
